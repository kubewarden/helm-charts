# generate CA
{{ $ca := genCAWithKey "kubewarden-controller-ca" 3650 (genPrivateKey "ecdsa") }}
{{ $caCert := ($ca.Cert | b64enc) }}
{{ $caPrivateKey := ($ca.Key | b64enc) }}
{{ $caBundle := $caCert }}

{{ $oldCaCert := "" }}
{{ $auditScannerClientCert := "" }}
{{ $auditScannerClientKey := "" }}
{{ $webhookServerCert := "" }}
{{ $webhookServerKey := "" }}

# check if the kubewarden-ca secret already exists and if so, use the existing values
{{ $caSecret := (lookup "v1" "Secret" .Release.Namespace "kubewarden-ca") }}
{{ if $caSecret }}
{{ $caCert = (index $caSecret.data "ca.crt") }}
{{ $caPrivateKey = (index $caSecret.data "ca.key") }}
# If the old CA certificate is missing, set it to "". This is to avoid issues
# with b64dec when the old CA certificate is not present in the secret. This
# can happen after an upgrade. The old CA field is removed from the secret
# because it's empty. Therefore, a future upgrade can fail.
{{ $oldCaCert = (index $caSecret.data "old-ca.crt" | default "") }}
{{ $caBundle = printf "%s%s" ($caCert | b64dec) ($oldCaCert | b64dec) | b64enc }}
# overwrite $ca with the existing CA
{{ $ca = buildCustomCert $caCert $caPrivateKey }}
{{ end }}

{{ $webhookServerCertSecret := (lookup "v1" "Secret" .Release.Namespace "kubewarden-webhook-server-cert") }}
{{ if $webhookServerCertSecret }}
{{ $webhookServerCert = (index $webhookServerCertSecret.data "tls.crt") }}
{{ $webhookServerKey = (index $webhookServerCertSecret.data "tls.key") }}
{{ else }}
# generate webhook server certificate
{{ $controllerDNSName :=  printf "%s-webhook-service.%s.svc" (include "kubewarden-controller.fullname" .) .Release.Namespace }}
{{ $webhookServerCertKeyPair := genSignedCertWithKey $controllerDNSName nil ( list $controllerDNSName ) 365 $ca (genPrivateKey "ecdsa") }}
{{ $webhookServerCert = ($webhookServerCertKeyPair.Cert | b64enc) }}
{{ $webhookServerKey = ($webhookServerCertKeyPair.Key | b64enc) }}
{{ end }}

{{ $auditScannerClientCertSecret := (lookup "v1" "Secret" .Release.Namespace "kubewarden-audit-scanner-client-cert") }}
{{ if $auditScannerClientCertSecret }}
{{ $auditScannerClientCert = (index $auditScannerClientCertSecret.data "tls.crt") }}
{{ $auditScannerClientKey = (index $auditScannerClientCertSecret.data "tls.key") }}
{{ else }}
# generate audit-scanner client certificate
{{ $auditScannerClientCertKeyPair := genSignedCertWithKey "audit-scanner-client" nil nil 365 $ca (genPrivateKey "ecdsa") }}
{{ $auditScannerClientCert = ($auditScannerClientCertKeyPair.Cert | b64enc) }}
{{ $auditScannerClientKey = ($auditScannerClientCertKeyPair.Key | b64enc) }}
{{ end }}

apiVersion: v1
kind: Secret
metadata:
  name: kubewarden-ca
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "kubewarden-controller.labels" . | nindent 4 }}
data:
  ca.crt: {{ $caCert }}
  ca.key: {{ $caPrivateKey }}
  {{- if $oldCaCert }}
  old-ca.crt: {{ $oldCaCert }}
  {{- end }}
---
apiVersion: v1
kind: Secret
metadata:
  name: kubewarden-webhook-server-cert
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "kubewarden-controller.labels" . | nindent 4 }}
data:
  tls.crt: {{ $webhookServerCert }}
  tls.key: {{ $webhookServerKey }}
---
apiVersion: v1
kind: Secret
metadata:
  name: kubewarden-audit-scanner-client-cert
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "kubewarden-controller.labels" . | nindent 4 }}
data:
  tls.crt: {{ $auditScannerClientCert }}
  tls.key: {{ $auditScannerClientKey }}
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    {{- include "kubewarden-controller.annotations" . | nindent 4 }}
  name: kubewarden-controller-mutating-webhook-configuration
  labels:
    {{- include "kubewarden-controller.labels" . | nindent 4 }}
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    caBundle: {{ $caBundle }}
    service:
      name: {{ include "kubewarden-controller.fullname" . }}-webhook-service
      namespace: {{ .Release.Namespace }}
      path: /mutate-policies-kubewarden-io-v1-clusteradmissionpolicy
  failurePolicy: Fail
  name: mclusteradmissionpolicy.kb.io
  rules:
  - apiGroups:
    - policies.kubewarden.io
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - clusteradmissionpolicies
  sideEffects: None
- admissionReviewVersions:
    - v1
    - v1beta1
  clientConfig:
    caBundle: {{ $caBundle }}
    service:
      name: {{ include "kubewarden-controller.fullname" . }}-webhook-service
      namespace: {{ .Release.Namespace }}
      path: /mutate-policies-kubewarden-io-v1-clusteradmissionpolicygroup
  failurePolicy: Fail
  name: mclusteradmissionpolicygroup.kb.io
  rules:
    - apiGroups:
      - policies.kubewarden.io
      apiVersions:
      - v1
      operations:
      - CREATE
      - UPDATE
      resources:
      - clusteradmissionpolicygroups
  sideEffects: None
- admissionReviewVersions:
    - v1
    - v1beta1
  clientConfig:
    caBundle: {{ $caBundle }}
    service:
      name: {{ include "kubewarden-controller.fullname" . }}-webhook-service
      namespace: {{ .Release.Namespace }}
      path: /mutate-policies-kubewarden-io-v1-policyserver
  failurePolicy: Fail
  name: mpolicyserver.kb.io
  rules:
    - apiGroups:
        - policies.kubewarden.io
      apiVersions:
        - v1
      operations:
        - CREATE
        - UPDATE
      resources:
        - policyservers
  sideEffects: None
- admissionReviewVersions:
    - v1
    - v1beta1
  clientConfig:
    caBundle: {{ $caBundle }}
    service:
      name: {{ include "kubewarden-controller.fullname" . }}-webhook-service
      namespace: {{ .Release.Namespace }}
      path: /mutate-policies-kubewarden-io-v1-admissionpolicy
  failurePolicy: Fail
  name: madmissionpolicy.kb.io
  rules:
    - apiGroups:
        - policies.kubewarden.io
      apiVersions:
        - v1
      operations:
        - CREATE
        - UPDATE
      resources:
        - admissionpolicies
  sideEffects: None
- admissionReviewVersions:
    - v1
    - v1beta1
  clientConfig:
    caBundle: {{ $caBundle }}
    service:
      name: {{ include "kubewarden-controller.fullname" . }}-webhook-service
      namespace: {{ .Release.Namespace }}
      path: /mutate-policies-kubewarden-io-v1-admissionpolicygroup
  failurePolicy: Fail
  name: madmissionpolicygroup.kb.io
  rules:
    - apiGroups:
      - policies.kubewarden.io
      apiVersions:
      - v1
      operations:
      - CREATE
      - UPDATE
      resources:
      - admissionpolicygroups
  sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    {{- include "kubewarden-controller.annotations" . | nindent 4 }}
  name: kubewarden-controller-validating-webhook-configuration
  labels:
    {{- include "kubewarden-controller.labels" . | nindent 4 }}
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    caBundle: {{ $caBundle }}
    service:
      name: {{ include "kubewarden-controller.fullname" . }}-webhook-service
      namespace: {{ .Release.Namespace }}
      path: /validate-policies-kubewarden-io-v1-clusteradmissionpolicy
  failurePolicy: Fail
  name: vclusteradmissionpolicy.kb.io
  rules:
  - apiGroups:
    - policies.kubewarden.io
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - clusteradmissionpolicies
  sideEffects: None
- admissionReviewVersions:
    - v1
    - v1beta1
  clientConfig:
    caBundle: {{ $caBundle }}
    service:
      name: {{ include "kubewarden-controller.fullname" . }}-webhook-service
      namespace: {{ .Release.Namespace }}
      path: /validate-policies-kubewarden-io-v1-clusteradmissionpolicygroup
  failurePolicy: Fail
  name: vclusteradmissionpolicygroup.kb.io
  rules:
    - apiGroups:
      - policies.kubewarden.io
      apiVersions:
      - v1
      operations:
      - CREATE
      - UPDATE
      resources:
      - clusteradmissionpolicygroups
  sideEffects: None
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    caBundle: {{ $caBundle }}
    service:
      name: {{ include "kubewarden-controller.fullname" . }}-webhook-service
      namespace: {{ .Release.Namespace }}
      path: /validate-policies-kubewarden-io-v1-admissionpolicy
  failurePolicy: Fail
  name: vadmissionpolicy.kb.io
  rules:
  - apiGroups:
    - policies.kubewarden.io
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - admissionpolicies
  sideEffects: None
- admissionReviewVersions:
    - v1
    - v1beta1
  clientConfig:
    caBundle: {{ $caBundle }}
    service:
      name: {{ include "kubewarden-controller.fullname" . }}-webhook-service
      namespace: {{ .Release.Namespace }}
      path: /validate-policies-kubewarden-io-v1-admissionpolicygroup
  failurePolicy: Fail
  name: vadmissionpolicygroup.kb.io
  rules:
  - apiGroups:
    - policies.kubewarden.io
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - admissionpolicygroups
  sideEffects: None
- admissionReviewVersions:
  - v1
  clientConfig:
    caBundle: {{ $caBundle }}
    service:
      name: {{ include "kubewarden-controller.fullname" . }}-webhook-service
      namespace: {{ .Release.Namespace }}
      path: /validate-policies-kubewarden-io-v1-policyserver
  failurePolicy: Fail
  name: vpolicyserver.kb.io
  rules:
  - apiGroups:
    - policies.kubewarden.io
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - policyservers
  sideEffects: None
